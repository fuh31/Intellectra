import argparse
import json
import multiprocessing
import os
import os.path as osp
import shutil
import sys
import time
from datetime import datetime

# Updated import paths for Intellectra
from intellectra.blockchain import validate_transaction, process_blockchain_data
from intellectra.visualizer import generate_token_visualization, apply_theme
from intellectra.analytics import analyze_data, check_data_integrity

NUM_ITERATIONS = 3

def print_time():
    """
    Log the current timestamp.
    """
    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

def parse_arguments():
    """
    Parse command-line arguments for the Intellectra pipeline.
    """
    parser = argparse.ArgumentParser(
        description="Intellectra: Blockchain Data Processing and Visualization"
    )
    parser.add_argument(
        "--data",
        type=str,
        required=True,
        help="Path to input Intellectra blockchain data",
    )
    parser.add_argument(
        "--theme",
        type=str,
        default="cyberpunk",
        choices=["cyberpunk", "futuristic", "minimalist"],
        help="Visualization theme for Intellectra token analytics",
    )
    parser.add_argument(
        "--output",
        type=str,
        default="output",
        help="Directory for processed outputs",
    )
    parser.add_argument(
        "--iterations",
        type=int,
        default=NUM_ITERATIONS,
        help="Number of iterations for refinement",
    )
    parser.add_argument(
        "--parallel",
        type=int,
        default=0,
        help="Number of parallel processes (0 for sequential)",
    )
    return parser.parse_args()

def worker(task_queue, theme, output_dir, lock):
    """
    Process tasks for Intellectra blockchain visualization.
    """
    print("Worker started.")
    while True:
        task = task_queue.get()
        if task is None:
            break

        with lock:
            print(f"Processing task: {task}")
            data = process_blockchain_data(task["data"])
            data = check_data_integrity(data)
            token_visualization = generate_token_visualization(data, theme=theme)
            apply_theme(token_visualization, theme)
            save_token_visualization(token_visualization, output_dir, task["name"])
            print(f"Task {task['name']} completed.")

    print("Worker finished.")

def save_token_visualization(token_visualization, output_dir, task_name):
    """
    Save the token visualization to the output directory.
    """
    os.makedirs(output_dir, exist_ok=True)
    output_path = osp.join(output_dir, f"{task_name}_token_visualization.png")
    token_visualization.save(output_path)
    print(f"Saved token visualization to {output_path}")

if __name__ == "__main__":
    args = parse_arguments()

    # Prepare output directory
    os.makedirs(args.output, exist_ok=True)

    # Prepare tasks
    tasks = [{"data": args.data, "name": f"task_{i}"} for i in range(args.iterations)]

    if args.parallel > 0:
        # Parallel processing
        task_queue = multiprocessing.Queue()
        lock = multiprocessing.Lock()

        # Add tasks to queue
        for task in tasks:
            task_queue.put(task)

        # Start workers
        workers = []
        for _ in range(args.parallel):
            worker_process = multiprocessing.Process(
                target=worker,
                args=(task_queue, args.theme, args.output, lock)
            )
            worker_process.start()
            workers.append(worker_process)

        # Add termination signals to queue
        for _ in range(args.parallel):
            task_queue.put(None)

        # Wait for workers to finish
        for worker_process in workers:
            worker_process.join()

    else:
        # Sequential processing
        for task in tasks:
            data = process_blockchain_data(task["data"])
            data = check_data_integrity(data)
            token_visualization = generate_token_visualization(data, theme=args.theme)
            apply_theme(token_visualization, args.theme)
            save_token_visualization(token_visualization, args.output, task["name"])

    print("All tasks completed.")

